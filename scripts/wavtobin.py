# -*- coding: utf-8 -*-
"""wavToBin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n2SjIrxcMa3ur-XRtkTBMmG8_mV77wTs
"""

import numpy as np
import wave
from scipy.signal import resample

def wav_to_bin_resampled(input_wav_file, output_bin_file, desired_sample_rate=44100):
    # Open the input WAV file
    with wave.open(input_wav_file, 'rb') as wav_in:
        # Get the parameters of the input WAV file
        num_channels = wav_in.getnchannels()
        sample_width = wav_in.getsampwidth()
        original_frame_rate = wav_in.getframerate()
        num_frames = wav_in.getnframes()

        # Read frames from the input WAV file
        frames = wav_in.readframes(num_frames)

        # Resample the audio if necessary
        if original_frame_rate != desired_sample_rate:
            print(f"Resampling audio from {original_frame_rate} Hz to {desired_sample_rate} Hz...")
            # Resampling using scipy
            num_samples = len(frames) // (sample_width * num_channels)
            samples = np.frombuffer(frames, dtype=np.dtype(f'int{8*sample_width}')).reshape((num_samples, num_channels))
            resampled_samples = resample(samples, int(num_samples * desired_sample_rate / original_frame_rate))
            frames = resampled_samples.astype(np.dtype(f'int{8*sample_width}')).tobytes()

        # Convert the binary data to numpy array
        samples = np.frombuffer(frames, dtype=np.int16)

        # Write the samples to the binary file
        with open(output_bin_file, 'wb') as bin_file:
            # Convert to little-endian format and write to file
            samples.tofile(bin_file)

# Usage example
input_wav_file = 'test.wav'
output_bin_file = 'test.bin'
wav_to_bin_resampled(input_wav_file, output_bin_file)

from scipy.io import wavfile
import numpy as np

def convertwavtobinary(inputwav, output_name):
    try:
        sampling_rate, data = wavfile.read(input_wav)

        #convers to mono audio with averaging
        if data.ndim > 1 and data.shape[1] == 2:
            data = np.mean(data, axis=1, dtype=np.int16)

        #sample at 44.1kHz
        resampled_data = np.interp(
            np.linspace(0, len(data) - 1, int(len(data) * target_sampling_rate / sampling_rate)),
            np.arange(len(data)),
            data[:, 0] if data.ndim > 1 else data
        )

        #overwrite the wave file and validate
        output_wav = f"{output_name}.wav"
        wavfile.write(output_wav, 44100, resampled_data.astype(np.int16))
        sampling_rate_o, data_o = wavfile.read(output_wav)
        print(f"Output WAV file ({output_wav}) sampling rate: {sampling_rate_o}")

        output_bin = f"{output_name}.bin"
        with open(output_bin, 'wb') as bin_file:
            bin_file.write(resampled_data.astype(np.int16).tobytes())

        return True, output_wav, output_bin

if name=="main":
    names = ['song','drum','boing','chime','piano']
    for i in names:
        success, message, output_bin = convert_wav_to_binary(i+'.wav',i)
        print(success, message, output_bin)